# system level imports
import os
import sys

# add scripts to python path for utility functions
sys.path.append('../../scripts/python')
from utils import link_sample_dirs

# retrieve config file
configfile: '../../files/config.yaml'

# set global parameter values
DATA_DIR = config['data_dir']
OUTPUT = config['output_dir']
LOGS = config['log_dir']
SAMPLE_REGEX = config['sample_regex']
ENDS = config['end_denote']
END_KEYS = sorted(list(ENDS.keys()))
DIRNAMES = link_sample_dirs(DATA_DIR, SAMPLE_REGEX)
IDS = list(DIRNAMES.keys())

print(END_KEYS)

rule all:
    input:
        expand(os.path.join(OUTPUT, 'qc', '{sample}',
                            '{sample}_{end}_qc.fastq.gz'), sample=IDS, end=ENDS)
        
# combine lanes for each read direction
rule fastq_combine:
    input:
        lambda wildcards: DIRNAMES[wildcards.sample]
    output:
        # temporary because we'll align to filtered data
        temp(os.path.join(OUTPUT, 'fastq', '{sample}',
                          '{sample}_{end}.fastq.gz'))
    shell:
        'cat {input}/{wildcards.sample}*{wildcards.end}*.fastq.gz >> {output}'


# AfterQC with fastp
rule fastp_qc:
    input:
        r1=os.path.join(OUTPUT, 'fastq', '{sample}',
                        '{sample}' + '_{}.fastq.gz'.format(END_KEYS[0])),
        r2=os.path.join(OUTPUT, 'fastq', '{sample}',
                        '{sample}' + '_{}.fastq.gz'.format(END_KEYS[1]))
    log:
        os.path.join(LOGS, 'fastp/{sample}.log')
    params:
        p1=config['fastp_params']
    output:
        r1=os.path.join(OUTPUT, 'qc', '{sample}',
                        '{sample}' + '_{}_qc.fastq.gz'.format(END_KEYS[0])),
        r2=os.path.join(OUTPUT, 'qc', '{sample}',
                        '{sample}' + '_{}_qc.fastq.gz'.format(END_KEYS[1])),
        html=os.path.join(OUTPUT, 'qc', '{sample}', 'fastp.html'),
        json=os.path.join(OUTPUT, 'qc', '{sample}', 'fastp.json')
    shell:
        '(fastp {params.p1} -i {input.r1} -I {input.r2} -o {output.r1} -O '
        '{output.r2} -h {output.html} -j {output.json}) 2> {log}'
